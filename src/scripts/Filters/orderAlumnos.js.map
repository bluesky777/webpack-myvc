{
  "version": 3,
  "file": "orderAlumnos.js",
  "sourceRoot": "",
  "sources": [
    "orderAlumnos.coffee"
  ],
  "names": [],
  "mappings": "AAAA;EAAA,OAAO,CAAC,MAAR,CAAe,cAAf,CAIA,CAAC,MAJD,CAIQ,qBAJR,EAI+B;IAAE,QAAA,CAAA,CAAA;aAChC,QAAA,CAAC,KAAD;IAAQ,IAAR,CAAA;AAEC,YAAA,QAAA;IAAA;QAAA,QAAA,GAAW;QACX,OAAO,CAAC,OAAR,CAAgB,KAAhB;IAAuB,QAAA,CAAC,IAAD,CAAA;iBACtB,QAAQ,CAAC,IAAT,CAAc,IAAd;QADsB,CAAvB;QAIA,UAAA,GAAa,QAAA,CAAC,CAAD;IAAI,CAAJ,CAAA;UACZ,IAAG,CAAC,CAAC,UAAU,CAAC,MAAb,GAAsB,CAAC,CAAC,UAAU,CAAC,MAAtC;YACQ,IAAG,OAAH;qBAAgB,EAAhB;aAAA,MAAA;qBAAuB,CAAC,EAAxB;aADR;WAAA,MAEK,IAAG,CAAC,CAAC,UAAU,CAAC,MAAb,KAAuB,CAAC,CAAC,UAAU,CAAC,MAAvC;AACJ,mBAAO,EADH;WAAA,MAAA;YAGG,IAAG,OAAH;qBAAgB,CAAC,EAAjB;aAAA,MAAA;qBAAwB,EAAxB;aAHH;;QAHO;QAQb,QAAQ,CAAC,IAAT,CAAe,QAAA,CAAC,CAAD;IAAI,CAAJ,CAAA;AACd,kBAAO,IAAP;AAAA,iBACM,UADN;cAEE,IAAG,CAAC,CAAC,UAAU,CAAC,QAAb,GAAwB,CAAC,CAAC,UAAU,CAAC,QAAxC;gBACQ,IAAG,OAAH;yBAAgB,CAAC,EAAjB;iBAAA,MAAA;yBAAwB,EAAxB;iBADR;eAAA,MAEK,IAAG,CAAC,CAAC,UAAU,CAAC,QAAb,KAAyB,CAAC,CAAC,UAAU,CAAC,QAAzC;AACJ,uBAAO,UAAA,CAAW,CAAX;IAAc,CAAd,EADH;eAAA,MAAA;gBAGG,IAAG,OAAH;yBAAgB,EAAhB;iBAAA,MAAA;yBAAuB,CAAC,EAAxB;iBAHH;;AAHD;AADN,iBASM,gBATN;cAUE,IAAG,CAAC,CAAC,UAAU,CAAC,cAAb,GAA8B,CAAC,CAAC,UAAU,CAAC,cAA9C;gBACQ,IAAG,OAAH;yBAAgB,CAAC,EAAjB;iBAAA,MAAA;yBAAwB,EAAxB;iBADR;eAAA,MAEK,IAAG,CAAC,CAAC,UAAU,CAAC,cAAb,KAA+B,CAAC,CAAC,UAAU,CAAC,cAA/C;AACJ,uBAAO,UAAA,CAAW,CAAX;IAAc,CAAd,EADH;eAAA,MAAA;gBAGG,IAAG,OAAH;yBAAgB,EAAhB;iBAAA,MAAA;yBAAuB,CAAC,EAAxB;iBAHH;;AAHD;AATN,iBAiBM,SAjBN;AAAA,iBAiBiB,WAjBjB;AAAA,iBAiB8B,YAjB9B;AAAA,iBAiB4C,WAjB5C;cAkBE,IAAG,CAAE,CAAA,IAAA,CAAF,GAAU,CAAE,CAAA,IAAA,CAAf;gBACQ,IAAG,OAAH;yBAAgB,CAAC,EAAjB;iBAAA,MAAA;yBAAwB,EAAxB;iBADR;eAAA,MAEK,IAAG,CAAE,CAAA,IAAA,CAAF,KAAW,CAAE,CAAA,IAAA,CAAhB;AACJ,uBAAO,UAAA,CAAW,CAAX;IAAc,CAAd,EADH;eAAA,MAAA;gBAGG,IAAG,OAAH;yBAAgB,EAAhB;iBAAA,MAAA;yBAAuB,CAAC,EAAxB;iBAHH;;AAHqC;AAjB5C,iBAyBM,QAzBN;AA0BE,qBAAO,UAAA,CAAW,CAAX;IAAc,CAAd;AA1BT;QADc,CAAf;AA+BA,eAAO;MA9CR;IADgC,CAAF;GAJ/B;AAAA",
  "sourcesContent": [
    "angular.module('myvcFrontApp')\n\n\n\n.filter('orderMatriculadosBy', [ ->\n\t(items, dato) ->\n\n\t\tfiltered = [];\n\t\tangular.forEach(items, (item)->\n\t\t\tfiltered.push(item);\n\t\t)\n\n\t\tsortTiempo = (a, b)->\n\t\t\tif a.resultados.tiempo > b.resultados.tiempo\n\t\t\t\treturn if reverse then 1 else -1\n\t\t\telse if a.resultados.tiempo == b.resultados.tiempo\n\t\t\t\treturn 0\n\t\t\telse\n\t\t\t\treturn if reverse then -1 else 1\n\n\t\tfiltered.sort( (a, b)->\n\t\t\tswitch tipo \n\t\t\t\twhen 'promedio'\n\t\t\t\t\tif a.resultados.promedio > b.resultados.promedio\n\t\t\t\t\t\treturn if reverse then -1 else 1\n\t\t\t\t\telse if a.resultados.promedio == b.resultados.promedio\n\t\t\t\t\t\treturn sortTiempo(a, b)\n\t\t\t\t\telse\n\t\t\t\t\t\treturn if reverse then 1 else -1\n\t\t\t\t\t\t\n\t\t\t\twhen 'cantidad_pregs'\n\t\t\t\t\tif a.resultados.cantidad_pregs > b.resultados.cantidad_pregs\n\t\t\t\t\t\treturn if reverse then -1 else 1\n\t\t\t\t\telse if a.resultados.cantidad_pregs == b.resultados.cantidad_pregs\n\t\t\t\t\t\treturn sortTiempo(a, b)\n\t\t\t\t\telse\n\t\t\t\t\t\treturn if reverse then 1 else -1\n\n\t\t\t\twhen 'nombres', 'examen_id', 'categorias', 'examen_at'\n\t\t\t\t\tif a[tipo] > b[tipo]\n\t\t\t\t\t\treturn if reverse then -1 else 1\n\t\t\t\t\telse if a[tipo] == b[tipo]\n\t\t\t\t\t\treturn sortTiempo(a, b)\n\t\t\t\t\telse\n\t\t\t\t\t\treturn if reverse then 1 else -1\n\n\t\t\t\twhen 'tiempo'\n\t\t\t\t\treturn sortTiempo(a, b)\n\n\t\t);\n\n\t\treturn filtered;\n])\n\n\n"
  ]
}