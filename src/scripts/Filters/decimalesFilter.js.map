{
  "version": 3,
  "file": "decimalesFilter.js",
  "sourceRoot": "",
  "sources": [
    "decimalesFilter.coffee"
  ],
  "names": [],
  "mappings": "AAAA;EAAA,OAAO,CAAC,MAAR,CAAe,cAAf,CAEA,CAAC,MAFD,CAEQ,WAFR,EAEqB;IAAE,QAAA,CAAA,CAAA;aACtB,QAAA,CAAC,KAAD;IAAQ,IAAR,CAAA;QACC,KAAA,GAAQ,UAAA,CAAW,KAAX;QAER,IAAG,CAAC,KAAA,GAAQ,CAAT,CAAA,KAAe,CAAlB;UACC,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,CAAd,EADT;SAAA,MAAA;UAGC,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,IAAd,EAHT;;AAKA,eAAO,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,OAAjB,CAAyB,uBAAzB;IAAkD,GAAlD;MARR;IADsB,CAAF;GAFrB,CAcA,CAAC,MAdD,CAcQ,cAdR,EAcwB;IAAE,QAAA,CAAA,CAAA;aACzB,QAAA,CAAC,KAAD;IAAQ,IAAR,CAAA;AACC,YAAA;QAAA,KAAA,GAAQ,UAAA,CAAW,KAAX;QAER,IAAG,CAAC,KAAA,GAAQ,CAAT,CAAA,KAAe,CAAlB;UACC,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,CAAd,EADT;SAAA,MAAA;UAGC,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,IAAd,EAHT;;QAKA,MAAA,GAAS,KAAK,CAAC,QAAN,CAAA,CAAgB,CAAC,OAAjB,CAAyB,uBAAzB;IAAkD,GAAlD;QACT,MAAA,GAAS,UAAA,CAAW,MAAX;AACT,eAAO;MAVR;IADyB,CAAF;GAdxB,CA4BA,CAAC,MA5BD,CA4BQ,YA5BR,EA4BsB;IAAE,QAAA,CAAA,CAAA;aACvB,QAAA,CAAC,KAAD;IAAQ,MAAR,CAAA;AACC,YAAA;QAAA,IAAI,KAAA,CAAM,KAAN,CAAJ;AAAuB,iBAAO,MAA9B;SAAA;;;;QAIA,MAAA,GAAS,GAAA,GAAM,KAAA,CAAM,CAAC,CAAC,MAAA,GAAS,CAAT,IAAe,MAAA,GAAS,CAAzB,CAAP,CAAmC,CAAC,IAApC,CAAyC,GAAzC;AACf,eAAO,IAAI,CAAC,KAAL,CAAW,KAAA,GAAQ,MAAnB,CAAA,GAA6B;MANrC;IADuB,CAAF;GA5BtB,CAuCA,CAAC,MAvCD,CAuCQ,uBAvCR,EAuCiC;IAAC,SAAD;IAAY,QAAA,CAAC,OAAD,CAAA;aAC5C,QAAA,CAAC,KAAD,CAAA;QACC,IAAI,CAAC,KAAA,CAAM,KAAN,CAAD,IAAiB,OAAO,CAAC,QAAR,CAAiB,CAAC,KAAlB,CAArB;AACC,iBAAO,OAAA,CAAQ,QAAR,CAAA,CAAkB,KAAlB;IAAyB,CAAzB,EADR;SAAA,MAAA;AAGC,iBAAO,MAHR;;MADD;IAD4C,CAAZ;GAvCjC;AAAA",
  "sourcesContent": [
    "angular.module('myvcFrontApp')\n\n.filter('decimales', [ ->\n\t(input, cant) ->\n\t\tinput = parseFloat(input)\n\n\t\tif (input % 1) == 0\n\t\t\tinput = input.toFixed(0)\n\t\telse\n\t\t\tinput = input.toFixed(cant)\n\n\t\treturn input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n])\n\n.filter('decimales_if', [ ->\n\t(input, cant) ->\n\t\tinput = parseFloat(input)\n\n\t\tif (input % 1) == 0\n\t\t\tinput = input.toFixed(0)\n\t\telse\n\t\t\tinput = input.toFixed(cant)\n\n\t\tnumero = input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\t\tnumero = parseFloat(numero)\n\t\treturn numero\n])\n\n.filter('setDecimal', [ ->\n\t(input, places)->\n\t\tif (isNaN(input)) then return input\n\t\t# If we want 1 decimal place, we want to mult/div by 10\n\t\t# If we want 2 decimal places, we want to mult/div by 100, etc\n\t\t# So use the following to create that factor\n\t\tfactor = \"1\" + Array(+(places > 0 and places + 1)).join(\"0\")\n\t\treturn Math.round(input * factor) / factor\n\n])\n\n.filter('formatNumberDocumento', ['$filter', ($filter)->\n\t(input)->\n\t\tif (!isNaN(input) && angular.isNumber(+input))\n\t\t\treturn $filter('number')(input, 0)\n\t\telse\n\t\t\treturn input\n\n]);\n"
  ]
}